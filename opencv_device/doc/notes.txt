We usually only build OpenCV when we have to. Each time is a new adventure, so instead of an engineering solution, here are some notes about what it took to get it to build last time.

Oct 19, 2014, Bryant - Xcode 7 GM, deployment target iOS 6.0
------------------------------------------------------------
Cloned https://github.com/jonmarimba/OpenCV-iOS to https://github.com/bluk/OpenCV-iOS/tree/bitcode

For the OpenCV-iOS project:
- Did same stuff in September 24, but removed the "-fembed-bitcode" flag. Using the Archive
  scheme action will produce a Bitcode enabled archive.

Picked target "opencv_imgproc", did an Archive Build. Found the Archive and Show Package Contents.
Grabbed both libopencv_core.a and libopencv_imgproc and copied to icc/opencv-device/lib.

Sep 24, 2014, Bryant - Xcode 7 GM, deployment target iOS 6.0
------------------------------------------------------------
Cloned https://github.com/jonmarimba/OpenCV-iOS to https://github.com/bluk/OpenCV-iOS/tree/bitcode

For the OpenCV-iOS project:
- Changed Deployment Target to iOS 6.0
- Changed ARCHS build setting from $(ARCHS_STANDARD_INCL_64_BIT) to "arm64 armv7 armv7s"
- Add "-fembed-bitcode" to generate Bitcode for library. FYI, Xcode <= 6.4 will not work with Bitcode.
- Explicitly use libc++ from LLVM instead of GNU (needs to match card.io)
- Enabled Testability due to recommended Settings (this should not have an effect on the built libraries)

Picked target "opencv_core", did a Release/Profiling build.
Picked target "opencv_imgproc", did a Release/Profiling build.

Used Organizer window to find build products.

Copied static libs libopencv_core.a and libopencv_imgproc.a to icc/opencv-device/lib.


Sep 11, 2014, Dave -- Xcode 6 GM, deployment target iOS 6.0
-----------------------------------------------------------
Opened OpenCV-iOS/OpenCV-iOS/OpenCV-iOS.xcodeproj

For the OpenCV-iOS project,
- changed Deployment Target to "iOS 6.0".
- change ARCHS build setting from $(ARCHS_STANDARD_INCL_64_BIT) to "arm64 armv7 armv7s"

Picked target "opencv_core", set Scheme to "Release".
Built.

Picked target "opencv_imgproc", set Scheme to "Release".
Built.

Used Organizer window to find build products.

Copied static libs libopencv_core.a and libopencv_imgproc.a to icc/opencv-device/lib.


Nov 1, 2013, Dave -- 64-bit build for iPhone 5S; redo in Xcode 5.0.1, deployment target >= iOS 5.1
--------------------------------------------------------------------------------------------------
Opened OpenCV-iOS/OpenCV-iOS/OpenCV-iOS.xcodeproj

For the OpenCV-iOS project,
- changed Deployment Target to "iOS 5.1".
- changed C++ Standard Library to "libc++"

Picked target "opencv_core", set Scheme to "Release".
Built.
Dealt with "Value Conversion Issue" warnings for 64-bit.
Built.

Picked target "opencv_imgproc", set Scheme to "Release".
Built.
Dealt with "Value Conversion Issue" warnings for 64-bit.
Built.

Used Organizer window to find build products.

Copied static libs libopencv_core.a and libopencv_imgproc.a to icc/opencv-device/lib.


Sep 16, 2013, Dave -- 64-bit build for iPhone 5S
---------------------------------------------------
Cloned https://github.com/jonmarimba/OpenCV-iOS

Apparently this is OpenCV 2.4.9 (!)

Opened OpenCV-iOS/OpenCV-iOS/OpenCV-iOS.xcodeproj

For the OpenCV-iOS project,
- changed Architectures to "Standard architectures (including 64-bit).
- changed Valid Architectures to "arm64 armv7 armv7s". (hmm -- might have already been set to that)
- changed Deployment Target to "iOS 6.0".

Picked target "opencv_core", set Scheme to "Release".
Built.

Picked target "opencv_imgproc", set Scheme to "Release".
Built.

Used Organizer window to find build products.

> lipo -detailed_info /blah/blah/libopencv-core.a
architecture armv7
    cputype CPU_TYPE_ARM
    cpusubtype CPU_SUBTYPE_ARM_V7
    offset 68
    size 10594704
    align 2^2 (4)
architecture armv7s
    cputype CPU_TYPE_ARM
    cpusubtype CPU_SUBTYPE_ARM_V7S
    offset 10594772
    size 10594784
    align 2^2 (4)
architecture (cputype (16777228) cpusubtype (0))
    cputype (16777228)
    cpusubtype cpusubtype (0)
    offset 21189556
    size 10839968
    align 2^2 (4)

Copied static libs libopencv_core.a and libopencv_imgproc.a to icc/opencv-device/lib.


Sep 13-16, 2013, Dave -- 64-bit build for iPhone 5S
---------------------------------------------------
Using the OpenCV directory from May 14, 2013:

In the cmake configuration, disable CUDA. (Only relevant because I had in the interim pointlessly installed CUDA onto my Mac.). [NECESSARY?]

Also change CMAKE_OSX_ARCHITECTURES to "armv6 armv7s arm64". [NECESSARY?]

In OpenCV/opencv/ios/build_framework.py, add "arm64" to the list of architectures:

    archs = ["arm64", "armv7", "armv7s", "i386"]

In OpenCV/opencv/ios/cmake/Modules/Platform/iOS.cmake, change:

    set (CMAKE_OSX_ARCHITECTURES "$(ARCHS_STANDARD_32_BIT)" CACHE string  "Build architecture for iOS")

to:

    set (CMAKE_OSX_ARCHITECTURES "$(ARCHS_STANDARD_64_BIT)" CACHE string  "Build architecture for iOS")


Followed the instructions in OpenCV/opencv/ios/readme.txt to run:

../opencv/ios/configure-device_xcode.sh

In OpenCV/build/CMakeCache.txt, changed:

CMAKE_OSX_SYSROOT:PATH=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk

to:

CMAKE_OSX_SYSROOT:PATH=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk

Modified command from OpenCV/opencv/ios/readme.txt to run:

xcodebuild -sdk iphoneos -configuration Release -target opencv_core -arch "armv7"
xcodebuild -sdk iphoneos -configuration Release -target opencv_core -arch "armv7s"
xcodebuild -sdk iphoneos -configuration Release -target opencv_core -arch "arm64"

and:

xcodebuild -sdk iphoneos -configuration Release -target opencv_imgproc -arch "armv7"
xcodebuild -sdk iphoneos -configuration Release -target opencv_imgproc -arch "armv7s"
xcodebuild -sdk iphoneos -configuration Release -target opencv_imgproc -arch "arm64"

(Building all three architectures with one command, as on May 14, 2013, kept failing. Breaking into three commands succeeded. Go figure.)

Then followed instructions from OpenCV/opencv/ios/readme.txt to run:

xcodebuild -sdk iphoneos -configuration Release -arch "armv7" -target install install
xcodebuild -sdk iphoneos -configuration Release -arch "armv7s" -target install install
xcodebuild -sdk iphoneos -configuration Release -arch "arm64" -target install install

(Again, had to break up the command into three commands.)

*** Ran the first of these commands, and got lots of builds happening, followed eventually by:
	Check dependencies
	Check dependencies
	Check dependencies
	Check dependencies
	Check dependencies
	Check dependencies
	Check dependencies
	Check dependencies
	Check dependencies
(72 failures)


May 14, 2013, Dave
------------------
Downloaded 2.4.5 source of OpenCV. (Sorry -- did this a couple of weeks ago, and did not record where it came from. Probably willowgarage?)

Disabled Eigen in cmake configuration, as compiler was having trouble locating the Eigen header files. Need to pursue this...

Followed the instructions in OpenCV/opencv/ios/readme.txt to run:

../opencv/ios/configure-device_xcode.sh

Opened OpenCV/build/OpenCV.xcodeproj, and changed the C++ Standard Library from stdlibc++ to libc++ for the targets opencv_core and opencv_imgproc.

Modified command from OpenCV/opencv/ios/readme.txt to:

xcodebuild -sdk iphoneos -configuration Release -target opencv_core -arch "armv7 armv7s"

and:

xcodebuild -sdk iphoneos -configuration Release -target opencv_imgproc -arch "armv7 armv7s"

Then followed instructions from OpenCV/opencv/ios/readme.txt to run:

xcodebuild -sdk iphoneos -configuration Release -arch "armv7 armv7s" -target install install

which, among lots of other things, created OpenCV_iPhoneOS folder containing relevant include files.

Copied static libs (libopencv_core.a and libopencv_imgproc.a, from OpenCV/build/lib/Release) and header files (the previously used ones in core/ and imgproc/, from OpenCV/OpenCV_iPHoneOS/include) into icc. Deleted opencv.hpp.

Didn't see any references to WINNT in those header files.


Sep 17, 2012, Josh
------------------

Needed to rebuild for armv7s support. Grabbed the git repo from https://github.com/Itseez/opencv, checked out the 2.4.2 tag (cdbda45125ac1b5b5afb724c76469ed7df8f2637).

Hacked on ios/build_framework.py to get it to do universal static libs for the few we need. Copied my hacked version into this dir as build_framework_2012_09_17.py. It would take a lot more work to make this a clean, reusable approach, and not really worth it.

Copied the output from this (static libs, header files) into icc. Removed newly introduced header files -- they were GPU related and irrelevant to us. Removed all references to WINNT (0x0400), to make the crazy crazy lawyers happy.

libzlib is no apparently no longer build, but linking to libz.dylib fixes that, which is a better solution anyway. Only matters for the _dev targets anyways, so no external impact.


